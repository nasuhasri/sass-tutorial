@use "sass:math";

$grid-columns: 12;

// base layout classes
.container {
    width: 100%;
    max-width: 1200px;
    // top/bottom - 0, left/right - auto
    margin: 0 auto; // centralize content into a central column on the page
    padding: 0 20px;
    box-sizing: border-box;
}

.row {
    display: flex;
    flex-flow: row wrap;
}

@include xs {
    @for $i from 1 through $grid-columns {
        // generate column width in xs screen size
        .col-#{$i}-xs {
            box-sizing: border-box;
            flex-grow: 0; // doesnt grow
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include sm {
    @for $i from 1 through $grid-columns {
        // generate column width in sm screen size
        .col-#{$i}-sm {
            box-sizing: border-box;
            flex-grow: 0; // doesnt grow
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include md {
    @for $i from 1 through $grid-columns {
        // generate column width in md screen size
        .col-#{$i}-md {
            box-sizing: border-box;
            flex-grow: 0; // doesnt grow
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include lg {
    @for $i from 1 through $grid-columns {
        // generate column width in lg screen size
        .col-#{$i}-lg {
            box-sizing: border-box;
            flex-grow: 0; // doesnt grow
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include xl {
    @for $i from 1 through $grid-columns {
        // generate column width in xl screen size
        .col-#{$i}-xl {
            box-sizing: border-box;
            flex-grow: 0; // doesnt grow
            width: math.div($i * 100%, $grid-columns);
        }
    }
}